{"version":3,"sources":["history.js","components/login.js","components/Chatlist.js","components/OtpValidate.js","App.js","serviceWorker.js","index.js"],"names":["history","Login","className","type","placeholder","variant","onClick","push","Component","Chatlist","name","id","aria-describedby","ValiationForm","state","otp","Errormessage","handleChange","bind","handleSubmit","event","console","log","target","value","this","setState","preventDefault","get","method","headers","body","JSON","stringify","then","res","status","window","location","href","catch","err","response","data","message","onSubmit","onChange","style","fontSize","color","React","App","to","exact","path","component","OtpValidate","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.34f6bee3.chunk.js","sourcesContent":["import { createBrowserHistory as history } from \"history\";\n\nexport default history();\n","import React, { Component } from \"react\";\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route,\r\n//   Link,\r\n//   Redirect,\r\n//   useParams,\r\n// } from \"react-router-dom\";\r\n\r\nimport history from \"./../history\";\r\n\r\nexport default class Login extends Component {\r\n  render() {\r\n    return (\r\n      <form>\r\n        <h3>Sign In</h3>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Enter Your Phno</label>\r\n          <input\r\n            type=\"phno\"\r\n            className=\"form-control\"\r\n            placeholder=\"Enter Phno\"\r\n          />\r\n        </div>\r\n\r\n        <button\r\n          variant=\"btn btn-success\"\r\n          onClick={() => history.push(\"/OtpValidate\")}\r\n          type=\"submit\"\r\n          className=\"btn btn-primary btn-block\"\r\n        >\r\n          SendOPT\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n// import ImageUploader from \"react-images-upload\";\r\n\r\nexport default class Chatlist extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"\"\r\n            id=\"\"\r\n            className=\"form-control\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"helpId\"\r\n          />\r\n          {/* <small id=\"helpId\" class=\"text-muted\">\r\n            Help text\r\n          </small> */}\r\n        </div>\r\n        {/* <div className=\"form-group\">\r\n          <image src=\"./image/people_image.png\" alt=\"image\"></image> \r\n          <div className=\"title-text\">Su u</div>\r\n          <div className=\"date\">27 Jun</div>\r\n          <div className=\"conversation-message\">Hello</div>\r\n\r\n          <input type=\"text\" className=\"form-control\" placeholder=\"name\" />\r\n        </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { get } from \"axios\";\r\n\r\n// import history from \"./../history\";\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route,\r\n//   Link,\r\n//   Redirect,\r\n//   useParams,\r\n// } from \"react-router-dom\";\r\n\r\nexport default class ValiationForm extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      otp: \"\",\r\n      Errormessage: \"\",\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    console.log(event.target.value);\r\n    this.setState({\r\n      otp: event.target.value,\r\n      // Errormessage: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    get(`http://localhost:4000/verfityotp?otp=${this.state.otp}`, {\r\n      method: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ otp: \"1234\" }),\r\n    })\r\n      .then((res) => {\r\n        // console.log(res.data);\r\n        if (res.status === 200) {\r\n          window.location.href = \"https://www.google.com/\";\r\n\r\n          // this.props.history.push(\"/CallChatQL\");\r\n          // this.setState({\r\n          //   data: res.data,\r\n          // });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n\r\n        if (err.response) {\r\n          if (err.response.status !== 200) {\r\n            this.setState({\r\n              Errormessage: err.response.data.message,\r\n            });\r\n          }\r\n          return;\r\n        }\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <h3>OtpValidate</h3>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Enter Your OTP</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"otp\"\r\n            value={this.state.otp}\r\n            onChange={this.handleChange}\r\n            className=\"form-control\"\r\n          />\r\n\r\n          <div style={{ fontSize: 15, color: \"red\" }}>\r\n            {this.state.Errormessage}\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          variant=\"btn btn-success\"\r\n          className=\"btn btn-primary btn-block\"\r\n          type=\"submit\"\r\n        >\r\n          Verify\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\n\nimport Login from \"./components/login\";\nimport Chatlist from \"./components/Chatlist\";\nimport OtpValidate from \"./components/OtpValidate\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n          <div className=\"container\">\n            <Link className=\"navbar-brand\" to={\"/sign-in\"}>\n              positronX.io\n            </Link>\n            <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n              <ul className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to={\"/Login\"}>\n                    Login\n                  </Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to={\"/Chatlist\"}>\n                    Sign up\n                  </Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\" to={\"/OtpValidate\"}>\n                    OtpValidate\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"auth-wrapper\">\n          <div className=\"auth-inner\">\n            <Switch>\n              <Route exact path=\"/Big9Chat/\" component={Login} />\n              <Route path=\"/Login\" component={Login} />\n              <Route path=\"/Chatlist\" component={Chatlist} />\n              <Route path=\"/OtpValidate\" component={OtpValidate} />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}